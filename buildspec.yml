version: 0.2

env:
  secrets-manager:
    OC_TOKEN: "arn:aws:secretsmanager:us-east-1:846869029012:secret:OC_TOKEN-1DDUI7:OC_TOKEN"
    OC_PASS: "arn:aws:secretsmanager:us-east-1:846869029012:secret:OC_PASS-x4nCJT:OC_PASS"
    OC_USER: "arn:aws:secretsmanager:us-east-1:846869029012:secret:OC_USER-DFnkhw:OC_USER"
    

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
        - echo Logging in to Amazon ECR...
        - aws --version
        # - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 	846869029012.dkr.ecr.us-east-2.amazonaws.com/coopeuch
        - echo Show folder content
        - ls -la
        - echo Maven version
        - mvn -version 
        - export KUBECONFIG=$HOME/.kube/config
  pre_build:
    commands:
      - echo WORKING WITH MAVEN
      - echo create .m2
      - mkdir -p $HOME/.m2
      - echo Installing gettext-base
      - apt-get install gettext-base
      - echo Changing env in settings
      - envsubst < settings_template.xml > settings.xml
      - echo set maven settings
      - cp settings.xml $HOME/.m2/settings.xml
  build:
    commands:
      - echo Build started on `date`
      - mvn package
      - echo Build docker image
      - docker build -t nexus-test-cp4i.apps.66fb28d07658ddb185cbb03c.ocp.techzone.ibm.com/coopeuch:latest .
      - echo Show docker image
      - docker images
      - echo Deploying to Nexus
      - mvn deploy -DskipTests -Dmaven.install.skip=true
  post_build:
    commands:
        - echo Login into docker
        - docker login --username docker-user --password $DOCKER_PASSWORD https://nexus-test-cp4i.apps.66fb28d07658ddb185cbb03c.ocp.techzone.ibm.com
        - echo Pushing Docker image to Registry...
        - docker push nexus-test-cp4i.apps.66fb28d07658ddb185cbb03c.ocp.techzone.ibm.com/coopeuch:latest
        - echo Showing token
        - echo $OC_TOKEN
        - echo Probando CURL
        - |
          curl -X POST "https://api.66fb28d07658ddb185cbb03c.ocp.techzone.ibm.com:6443/apis/tekton.dev/v1/namespaces/cp4i/pipelineruns" -H "Authorization: Bearer $OC_TOKEN" -H "Content-Type: application/json" -d '{
              "apiVersion": "tekton.dev/v1",
              "kind": "PipelineRun",
              "metadata": {
                "generateName": "triggered-pipeline-run-"
              },
              "spec": {
                "pipelineRef": {
                  "name": "hello-world-pipeline"
                },
                "params": [
                  {
                    "name": "message",
                    "value": "Hello from AWS CodeBuild!"
                  }
                ]
              }
            }'
        - echo Terminado el CURL
        # - echo Set EKS 
        # - aws eks update-kubeconfig --region us-east-2 --name eks-coopeuch-demo01
        # - cat /root/.kube/config
        # - echo GET Nodes
        # - kubectl get nodes 
        # - echo Updating Kubernetes deployment...
        # - kubectl apply -f k8s 